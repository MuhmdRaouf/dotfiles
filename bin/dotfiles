#!/bin/bash

### A tidy $HOME is a tidy mind
# Obey XDG conventions.
export XDG_CONFIG_HOME="$HOME/.config";
[ -d "$XDG_CONFIG_HOME" ] || mkdir -p "$XDG_CONFIG_HOME"

export XDG_CACHE_HOME="$HOME/.cache";
[ -d "$XDG_CACHE_HOME" ] || mkdir -p "$XDG_CACHE_HOME"

export XDG_LOCAL_HOME="$HOME/.local";
[ -d "$XDG_LOCAL_HOME" ] || mkdir -p "$XDG_LOCAL_HOME"

XDG_BIN_HOME="$XDG_LOCAL_HOME/bin";
[ -d "$XDG_BIN_HOME" ] || mkdir -p "$XDG_BIN_HOME"

export XDG_DATA_HOME="$XDG_LOCAL_HOME/share";
[ -d "$XDG_DATA_HOME" ] || mkdir -p "$XDG_DATA_HOME"

export XDG_STATE_HOME="$XDG_LOCAL_HOME/state";
[ -d "$XDG_STATE_HOME" ] || mkdir -p "$XDG_STATE_HOME"

export XDG_DOTFILES_HOME="$XDG_CONFIG_HOME/dotfiles"

# Prints regular messages.
function green_echo() {
  echo
  echo -e "\033[0;32m[Message] ${1}\033[0m"
  echo
}

# Prints prompts requiring user attention.
function yellow_echo() {
  echo
  echo -e "\033[0;33m[Attention] ${1}\033[0m"
  echo
}

# Prints error prompts.
function red_echo() {
  echo
  echo -e "\033[0;31m[Fatal] ${1}\033[0m"
  echo
}

# Prompts user yes/no for the installation.
function selection_prompt() {
  yellow_echo "Would you like to install $1 related files?"
  read -p "y/n? > " -n1 -r REPLY # -p for prompt, -n1 for reading 1 character, and -r for reading literally
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    green_echo "Deploying $1 related files..."
    true
  else
    green_echo "Skipping $1 related files..."
    false
  fi
}

# Creates a symlink.
function symlink() {
  green_echo "Creating symlink for $1 at $2..."
  ln -sf "$1" "$2"
}

function select_dotfile_version() {
  while true; do
    read -p "Choose dotfile version (main or minimal): " -r dotfile_version # -p for prompt, and -r for reading literally
    case "${dotfile_version}" in
      main|minimal)
        export DOTFILES_BRANCH="${dotfile_version}"
        green_echo "Selected dotfile: ${dotfile_version}"
        break
        ;;
      *)
        red_echo "Choose only main or minimal"
        ;;
    esac
  done
}

function clone_dotfiles() {
  select_dotfile_version
  if selection_prompt "Clone dotfiles"; then
    if [ ! -d "$XDG_DOTFILES_HOME" ]; then
      git clone --branch ${DOTFILES_BRANCH} git@github.com:MuhmdRaouf/dotfiles.git "$XDG_DOTFILES_HOME"
    else
      red_echo "dotfiles already exists."
    fi
  fi
}

function install_bin() {
  if selection_prompt "Binaries "; then
    local BINARY_FILES=("dotfiles")
    for BINARY_FILE in "${BINARY_FILES[@]}"; do
      local XDG_BINARY_FILES_HOME="${XDG_DOTFILES_HOME}/bin"
      symlink "${XDG_BINARY_FILES_HOME}/${BINARY_FILE}" "${XDG_BIN_HOME}"
    done
  fi
}

# Installs Homebrew formulae and runs macOS specific
function install_homebrew_core() {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    green_echo "
      Homebrew Core Formulae/Casks:
      Existing formulae will be uninstalled.
      Some casks might not be compitable with non-macOS systems.
      Do you want to proceed?
    "
    if selection_prompt "Homebrew Core "; then
      brew bundle --file "${XDG_DOTFILES_HOME}"/homebrew/BrewfileCore
    fi
  fi
}

function install_homebrew_optional() {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    green_echo "
      Homebrew Optional Formulae/Casks:
      This might take a while, and I honestly recommend you to go through each program manually.
      Do you want to proceed?
    "
    if selection_prompt "Homebrew Optional "; then
      brew bundle --file "${XDG_DOTFILES_HOME}"/homebrew/BrewfileOptional
    fi
  fi
}

function install_bottom() {
  if selection_prompt "Bottom 󱕎"; then
    local XDG_BTM_CONFIG_HOME="${XDG_DOTFILES_HOME}/bottom"
    symlink "${XDG_BTM_CONFIG_HOME}" "${XDG_CONFIG_HOME}"
  fi
}

function install_fsh() {
  if selection_prompt "ZSH Fast Syntax Highlighting "; then
    local XDG_FSH_CONFIG_HOME="${XDG_DOTFILES_HOME}/fsh"
    symlink "${XDG_FSH_CONFIG_HOME}" "${XDG_CONFIG_HOME}"
  fi
}

function install_git() {
  if selection_prompt "Git "; then
    local XDG_GIT_CONFIG_HOME="${XDG_DOTFILES_HOME}/git"
    symlink "${XDG_GIT_CONFIG_HOME}" "${XDG_CONFIG_HOME}"
  fi
}

function install_k9s() {
  if selection_prompt "K9s ⎈"; then
    local XDG_K9S_CONFIG_HOME="${XDG_DOTFILES_HOME}/k9s"
    symlink "${XDG_K9S_CONFIG_HOME}" "${XDG_CONFIG_HOME}"
  fi
}

function install_mise() {
  if selection_prompt "mise-en-place "; then
    local XDG_MISE_CONFIG_HOME="${XDG_DOTFILES_HOME}/mise"
    symlink "${XDG_MISE_CONFIG_HOME}" "${XDG_CONFIG_HOME}"
  fi
}

function install_neovim() {
  if selection_prompt "neovim "; then
    local XDG_VIM_CONFIG_HOME="${XDG_DOTFILES_HOME}/nvim"
    symlink "${XDG_VIM_CONFIG_HOME}" "${XDG_CONFIG_HOME}"
  fi
}

function install_starship() {
  if selection_prompt "starship 󱓟"; then
    local XDG_STARSHIP_CONFIG_HOME="${XDG_DOTFILES_HOME}/starship"
    symlink "${XDG_STARSHIP_CONFIG_HOME}" "${XDG_CONFIG_HOME}"
  fi
}

function install_tmux() {
  if selection_prompt "Tmux "; then
    local TMUX_FOLDERS=("tmux" "tmuxp" "tmux-powerline")
    for FOLDER in "${TMUX_FOLDERS[@]}"; do
      local XDG_TMUX_CONFIG_HOME="${XDG_DOTFILES_HOME}/${FOLDER}"
      symlink "${XDG_TMUX_CONFIG_HOME}" "${XDG_CONFIG_HOME}"
    done
  fi
}

function install_zsh() {
  if selection_prompt "ZSH "; then
    local XDG_ZSH_CONFIG_HOME="${XDG_DOTFILES_HOME}/zsh"
    symlink "${XDG_ZSH_CONFIG_HOME}" "${XDG_CONFIG_HOME}"

    local ZSH_FILES=("zshrc" "zshenv")
    for FILE in "${ZSH_FILES[@]}"; do
      symlink "${XDG_ZSH_CONFIG_HOME}/${FILE}" "${HOME}/.${FILE}"
    done
  fi
}


# Installs cross-platform core utilities
function install() {
  green_echo "
     ___      _    __ _ _
    |   \ ___| |_ / _(_) |___ ___
    | |) / _ \  _|  _| | / -_|_-<
    |___/\___/\__|_| |_|_\___/__/
  "

  clone_dotfiles
  install_bin
  install_homebrew_core
  install_homebrew_optional
  install_bottom
  install_fsh
  install_git
  install_k9s
  install_mise
  install_neovim
  install_starship
  install_tmux
  install_zsh

  yellow_echo "Ending the dotfiles installation..."

  green_echo '
       ____   __   __U _____ u
    U | __.)u \ \ / /\| ___.|/
     \|  _ \/  \ V /  |  _|.
      | |_) | U_|.|_u | |___
      |____/    |_|   |_____|
     _|| \\_.-,//|(_  <<   >>
    (__) (__)\_) (__)(__) (__)
  '
}

# Prints help message about this script
function help() {
  green_echo "
                      Dotfiles Utility Script Usage
    ===================================================================
    Syntax: ./dotfiles-deploy.sh <arg>
    ===================================================================

    args:
      --clone-dotfiles             : Clone configuration repository.
      --install                    : Deploy configuration symlinks for cross-platform utilities.
      --install-bin                : Install binary directory.
      --install-homebrew-core      : Install homebrew core packages.
      --install-homebrew-optional  : Install homebrew optional packages.
      --install_bottom             : Deploy bottom configuration symlinks.
      --install-fsh                : Deploy zsh fast syntax highlighting configuration symlinks.
      --install-git                : Deploy git configuration symlinks.
      --install-k9s                : Deploy k9s configuration symlinks.
      --install-mise               : Deploy mise-en-place configuration symlinks.
      --install-neovim             : Deploy neovim configuration symlinks.
      --install-starship           : Deploy starship configuration symlinks.
      --install-tmux               : Deploy tmux configuration symlinks.
      --install-zsh                : Deploy zsh configuration symlinks.
  "
}

function main() {
  case $1 in
    "--clone-dotfiles")
      clone_dotfiles
    ;;
    "--install")
      install
    ;;
    "--install-bin")
      install_bin
    ;;
    "--install-homebrew-core")
      install_homebrew_core
    ;;
    "--install-homebrew-optional")
      install_homebrew_optional
    ;;
    "--install-bottom")
      install_bottom
    ;;
    "--install-fsh")
      install_fsh
    ;;
    "--install-git")
      install_git
    ;;
    "--install-k9s")
      install_k9s
    ;;
    "--install-mise")
      install_mise
    ;;
    "--install-neovim")
      install_neovim
    ;;
    "--install-starship")
      install_starship
    ;;
    "--install-tmux")
      install_tmux
    ;;
    "--install-zsh")
      install_zsh
    ;;
    "--help")
      help
    ;;
    *)
     red_echo "Invalid option"
     help
    ;;
  esac

  exit 0
}

main "$@"
