#+TITLE:Doom Emacs configuration

#+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC

Place your private configuration here! Remember,
you do not need to run 'doom sync' after modifying this file!

Some functionality uses this to identify you,
e.g. GPG configuration, email, clients, file templates and snippets. It is optional.
#+BEGIN_SRC emacs-lisp
(setq 
  user-full-name "Raouf"
  user-mail-address "mohammed@raouf.me")
#+END_SRC

Doom exposes five (optional) variables for controlling fonts in Doom:

 - `doom-font' -- the primary font to use
 - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
 - `doom-big-font' -- used for `doom-big-font-mode'; use this for presentations or streaming.
 - `doom-symbol-font' -- for symbols
 - `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they accept.
For example:
#+BEGIN_SRC emacs-lisp
(setq 
  doom-font 
    (font-spec :family "FiraCode Nerd Font" :size 14 :weight 'medium)
  doom-variable-pitch-font 
    (font-spec :family "FiraCode Nerd Font" :size 14 :weight 'medium)
  doom-big-font 
    (font-spec :family "FiraCode Nerd Font" :size 18 :weight 'medium))
#+END_SRC

If you or Emacs can't find your font, use 'M-x describe-font' to look them
up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-one)
#+END_SRC

This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'visual)
#+END_SRC

If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/.org/")
#+END_SRC

Projectile
#+BEGIN_SRC emacs-lisp
(setq projectile-project-search-path '(("~/.work/" . 2) "~/playground/"))
#+END_SRC

Treemacs theme
#+BEGIN_SRC emacs-lisp
(after! doom-themes 
  (setq doom-themes-treemacs-theme "doom-colors"))
#+END_SRC

sane undo like vim :D
#+BEGIN_SRC emacs-lisp
  (setq evil-want-fine-undo t)
#+END_SRC

fix Eager macro-expansion failure
#+begin_src emacs-lisp
(after! lsp-mode
  ;; https://github.com/emacs-lsp/lsp-mode/issues/3577#issuecomment-1709232622
  (delete 'lsp-terraform lsp-client-packages))
#+end_src

Enable vertico-prescient for better sorting and filtering
#+begin_src emacs-lisp
(use-package! vertico-prescient
  :hook (vertico-mode . vertico-prescient-mode)
  :hook (vertico-prescient-mode . prescient-persist-mode)
  :config
  (setq prescient-save-file (concat doom-cache-dir "prescient-save.el")))
#+end_src

Enable corfu-prescient for better sorting and filtering
#+begin_src emacs-lisp
(use-package! corfu-prescient
  :hook (corfu-mode . corfu-prescient-mode)
  :hook (corfu-prescient-mode . prescient-persist-mode)
  :config
  (setq prescient-save-file (concat doom-cache-dir "prescient-save.el")))
#+end_src

codeium.el
#+begin_src emacs-lisp
(use-package! codeium
  :init
  ;; use globally
  (add-to-list 'completion-at-point-functions #'codeium-completion-at-point)

  ;; lazy loading, if you want
  :defer t

  :config
  (setq use-dialog-box nil) ;; do not use popup boxes

  ;; if you don't want to use customize to save the api-key
  ;; (setq codeium/metadata/api_key "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")

  ;; get codeium status in the modeline
  (setq codeium-mode-line-enable
    (lambda (api) (not (memq api '(CancelRequest Heartbeat AcceptCompletion)))))
  (add-to-list 'mode-line-format '(:eval (car-safe codeium-mode-line)) t)

  ;; use M-x codeium-diagnose to see apis/fields that would be sent to the local language server
  (setq codeium-api-enabled
    (lambda (api)
      (memq api '(GetCompletions Heartbeat CancelRequest GetAuthToken RegisterUser auth-redirect AcceptCompletion)))))
#+end_src

Whenever you reconfigure a package,
make sure to wrap your config in an `after!' block,
otherwise Doom's defaults may override your settings. E.g.

  (after! PACKAGE (setq x y))

The exceptions to this rule:

  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.
